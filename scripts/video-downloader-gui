#!/bin/bash
# Interfaz Gr√°fica para el Descargador Universal de Videos v3.0
# Usa Zenity para crear una interfaz amigable
# Autor: DreamCoder08

set -euo pipefail
# Forzar tema oscuro para Zenity y evitar advertencias de Adwaita
export GTK_THEME=Adwaita:dark


# Configuraci√≥n
CONFIG_DIR="$HOME/.config/video-downloader"
ICON_DIR="$CONFIG_DIR/icons"
TEMP_DIR="$HOME/.cache/video-downloader"

# Cargar configuraci√≥n
source "$CONFIG_DIR/config.conf" 2>/dev/null || true

# Crear directorios necesarios
mkdir -p "$CONFIG_DIR" "$ICON_DIR" "$TEMP_DIR"

# Colores para la terminal (si se usa desde l√≠nea de comandos)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Verificar dependencias
check_dependencies() {
    local missing_deps=()
    
    command -v zenity >/dev/null || missing_deps+=("zenity")
    command -v yt-dlp >/dev/null || missing_deps+=("yt-dlp")
    command -v jq >/dev/null || missing_deps+=("jq")
    command -v notify-send >/dev/null || missing_deps+=("libnotify")
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        zenity --error --title="Dependencias Faltantes" \
               --text="Faltan las siguientes dependencias:\n\n$(printf '%s\n' "${missing_deps[@]}")\n\nEjecuta: sudo pacman -S ${missing_deps[*]}" \
               --width=400
        exit 1
    fi
}

# Configurar iconos
setup_icons() {
    # Crear iconos simples si no existen
    if [[ ! -f "$ICON_DIR/download.png" ]]; then
        # Usar iconos del sistema si est√°n disponibles
        for icon_path in "/usr/share/icons/hicolor/48x48/apps/" "/usr/share/pixmaps/"; do
            if [[ -f "${icon_path}download.png" ]]; then
                cp "${icon_path}download.png" "$ICON_DIR/download.png"
                break
            fi
        done
    fi
}

# Funci√≥n para mostrar notificaciones
notify_gui() {
    local title="$1"
    local message="$2"
    local icon="${3:-info}"
    local urgency="${4:-normal}"
    
    notify-send "$title" "$message" --icon="$icon" --urgency="$urgency" 2>/dev/null || true
}

# Funci√≥n para validar URL
validate_url() {
    local url="$1"
    
    # Verificaciones b√°sicas
    if [[ ! "$url" =~ ^https?:// ]]; then
        return 1
    fi
    
    # Verificar plataformas soportadas
    if [[ "$url" =~ (youtube\.com|youtu\.be|tiktok\.com|instagram\.com|twitter\.com|x\.com|facebook\.com|reddit\.com|vimeo\.com|dailymotion\.com|twitch\.tv) ]]; then
        return 0
    fi
    
    return 1
}

# Ventana principal
show_main_window() {
    while true; do
        local choice
        choice=$(zenity --list \
                        --title="üé¨ Descargador Universal de Videos v3.0" \
                        --text="Selecciona una acci√≥n:" \
                        --column="Acci√≥n" --column="Descripci√≥n" \
                        --width=600 --height=400 \
                        "Descargar Video" "Descargar un video individual" \
                        "Descarga por Lotes" "Descargar m√∫ltiples videos" \
                        "Administrar Cola" "Ver y gestionar la cola de descargas" \
                        "Configuraci√≥n" "Cambiar configuraci√≥n del sistema" \
                        "Estad√≠sticas" "Ver estad√≠sticas de descargas" \
                        "Compartir Redes" "Compartir en redes sociales" \
                        "Herramientas" "Herramientas adicionales" \
                        "Acerca de" "Informaci√≥n sobre el programa" \
                        "Salir" "Cerrar el programa" 2>/dev/null)
        
        case "$choice" in
            "Descargar Video")
                show_download_dialog
                ;;
            "Descarga por Lotes")
                show_batch_download_dialog
                ;;
            "Administrar Cola")
                show_queue_manager
                ;;
            "Configuraci√≥n")
                show_settings_dialog
                ;;
            "Estad√≠sticas")
                show_statistics
                ;;
            "Compartir Redes")
                show_social_sharing
                ;;
            "Herramientas")
                show_tools_menu
                ;;
            "Acerca de")
                show_about_dialog
                ;;
            "Salir"|"")
                exit 0
                ;;
        esac
    done
}

# Di√°logo de descarga individual
show_download_dialog() {
    local form_data
    form_data=$(zenity --forms \
                       --title="üì• Descargar Video" \
                       --text="Configuraci√≥n de descarga:" \
                       --add-entry="URL del Video:" \
                       --add-combo="Calidad:" \
                       --combo-values="best|720p|480p|360p|audio" \
                       --add-entry="Directorio (opcional):" \
                       --add-combo="Acci√≥n:" \
                       --combo-values="Descargar|Solo Info|A√±adir a Cola" \
                       --separator="|" \
                       --width=500 2>/dev/null)
    
    if [[ -z "$form_data" ]]; then
        return
    fi
    
    IFS='|' read -r url quality custom_dir action <<< "$form_data"
    
    # Validar URL
    if ! validate_url "$url"; then
        zenity --error --title="URL Inv√°lida" \
               --text="La URL proporcionada no es v√°lida o no est√° soportada.\n\nPlataformas soportadas:\n‚Ä¢ YouTube\n‚Ä¢ TikTok\n‚Ä¢ Instagram\n‚Ä¢ Twitter/X\n‚Ä¢ Facebook\n‚Ä¢ Y m√°s..."
        return
    fi
    
    # Configurar directorio
    local output_dir="${custom_dir:-$DOWNLOAD_DIR}"
    
    case "$action" in
        "Descargar")
            perform_download "$url" "$quality" "$output_dir"
            ;;
        "Solo Info")
            show_video_info "$url"
            ;;
        "A√±adir a Cola")
            add_to_download_queue "$url" "$quality" "$output_dir"
            ;;
    esac
}

# Realizar descarga con progreso
perform_download() {
    local url="$1"
    local quality="$2"
    local output_dir="$3"
    
    # Definir temp_log fuera del subshell
    local temp_log="$TEMP_DIR/download_$$.log"
    
    # Mostrar di√°logo de progreso
    (
        echo "# Iniciando descarga..."
        echo "10"
        
        echo "# Obteniendo informaci√≥n del video..."
        echo "20"
        
        # Ejecutar descarga en segundo plano
        "$HOME/.local/bin/download-video" "$url" --quality "$quality" --output "$output_dir" > "$temp_log" 2>&1 &
        local download_pid=$!
        
        # Monitorear progreso
        local progress=30
        while kill -0 $download_pid 2>/dev/null; do
            echo "# Descargando video... $progress%"
            echo "$progress"
            sleep 2
            progress=$((progress + 5))
            if [[ $progress -gt 90 ]]; then
                progress=90
            fi
        done
        
        wait $download_pid
        local exit_code=$?
        
        if [[ $exit_code -eq 0 ]]; then
            echo "# ¬°Descarga completada!"
            echo "100"
            notify_gui "‚úÖ Descarga Completada" "Video descargado exitosamente" "emblem-downloads"
        else
            echo "# Error en la descarga"
            echo "100"
            notify_gui "‚ùå Error de Descarga" "Fallo al descargar el video" "dialog-error"
        fi
        
        sleep 2
    ) | zenity --progress \
               --title="Descargando Video" \
               --text="Procesando..." \
               --width=400 \
               --auto-close
    
    # Mostrar resultado
    if [[ -f "$temp_log" ]]; then
        if grep -q "ERROR" "$temp_log"; then
            zenity --error --title="Error de Descarga" \
                   --text="Ocurri√≥ un error durante la descarga.\n\nRevisa los logs para m√°s detalles."
        else
            zenity --info --title="√âxito" \
                   --text="¬°Video descargado exitosamente!\n\nUbicaci√≥n: $output_dir"
        fi
#        rm -f "$temp_log"
    fi
}

# Mostrar informaci√≥n del video
show_video_info() {
    local url="$1"
    
    # Obtener informaci√≥n
    local info_file="$TEMP_DIR/video_info_$$.json"
    
    (
        echo "# Obteniendo informaci√≥n del video..."
        echo "50"
        
        yt-dlp --no-download --print-json "$url" > "$info_file" 2>/dev/null
        
        echo "# Procesando informaci√≥n..."
        echo "100"
        
        sleep 1
    ) | zenity --progress \
               --title="Obteniendo Informaci√≥n" \
               --text="Procesando..." \
               --width=300 \
               --auto-close
    
    if [[ -f "$info_file" ]] && [[ -s "$info_file" ]]; then
        local title=$(jq -r '.title // "N/A"' "$info_file")
        local uploader=$(jq -r '.uploader // "N/A"' "$info_file")
        local duration=$(jq -r '.duration // "N/A"' "$info_file")
        local view_count=$(jq -r '.view_count // "N/A"' "$info_file")
        local upload_date=$(jq -r '.upload_date // "N/A"' "$info_file")
        local description=$(jq -r '.description // "N/A"' "$info_file" | head -c 200)
        
        local info_text="T√≠tulo: $title\n"
        info_text+="Creador: $uploader\n"
        info_text+="Duraci√≥n: $duration segundos\n"
        info_text+="Visualizaciones: $view_count\n"
        info_text+="Fecha de subida: $upload_date\n\n"
        info_text+="Descripci√≥n:\n$description..."
        
        zenity --info --title="üì∫ Informaci√≥n del Video" \
               --text="$info_text" \
               --width=500 --height=300
        
        rm -f "$info_file"
    else
        zenity --error --title="Error" \
               --text="No se pudo obtener la informaci√≥n del video.\n\nVerifica que la URL sea correcta."
    fi
}

# A√±adir a cola de descarga
add_to_download_queue() {
    local url="$1"
    local quality="$2"
    local output_dir="$3"
    
    local queue_id
    queue_id=$("$HOME/.local/bin/download-queue-manager" add "$url" "$quality" "$output_dir")
    
    zenity --info --title="üìÅ A√±adido a la Cola" \
           --text="Video a√±adido a la cola de descarga.\n\nID de cola: $queue_id\n\nPuedes gestionar la cola desde el men√∫ principal."
}

# Descarga por lotes
show_batch_download_dialog() {
    local urls_text
    urls_text=$(zenity --text-info \
                       --title="üìù Descarga por Lotes" \
                       --text="Ingresa las URLs (una por l√≠nea):" \
                       --editable \
                       --width=600 --height=400 2>/dev/null)
    
    if [[ -z "$urls_text" ]]; then
        return
    fi
    
    # Configuraci√≥n adicional
    local batch_config
    batch_config=$(zenity --forms \
                          --title="Configuraci√≥n de Lote" \
                          --text="Configuraci√≥n para descarga por lotes:" \
                          --add-combo="Calidad:" \
                          --combo-values="best|720p|480p|360p|audio" \
                          --add-entry="Directorio (opcional):" \
                          --separator="|" \
                          --width=400 2>/dev/null)
    
    if [[ -z "$batch_config" ]]; then
        return
    fi
    
    IFS='|' read -r quality custom_dir <<< "$batch_config"
    local output_dir="${custom_dir:-$DOWNLOAD_DIR}"
    
    # Procesar URLs
    local urls_array=()
    while IFS= read -r line; do
        line=$(echo "$line" | xargs)  # Trim whitespace
        if [[ -n "$line" ]] && validate_url "$line"; then
            urls_array+=("$line")
        fi
    done <<< "$urls_text"
    
    if [[ ${#urls_array[@]} -eq 0 ]]; then
        zenity --error --title="Error" \
               --text="No se encontraron URLs v√°lidas."
        return
    fi
    
    # Confirmar descarga
    if zenity --question \
              --title="Confirmar Descarga por Lotes" \
              --text="Se a√±adir√°n ${#urls_array[@]} videos a la cola de descarga.\n\n¬øContinuar?" \
              --width=300; then
        
        # A√±adir todos a la cola
        local added_count=0
        for url in "${urls_array[@]}"; do
            "$HOME/.local/bin/download-queue-manager" add "$url" "$quality" "$output_dir" >/dev/null
            ((added_count++))
        done
        
        zenity --info --title="√âxito" \
               --text="$added_count videos a√±adidos a la cola de descarga.\n\nPuedes gestionar la cola desde el men√∫ principal."
    fi
}

# Gestor de cola
show_queue_manager() {
    while true; do
        local choice
        choice=$(zenity --list \
                        --title="üìÅ Administrador de Cola" \
                        --text="Gestiona la cola de descargas:" \
                        --column="Acci√≥n" --column="Descripci√≥n" \
                        --width=500 --height=300 \
                        "Ver Estado" "Mostrar estado actual de la cola" \
                        "Iniciar Cola" "Iniciar procesamiento de la cola" \
                        "Detener Cola" "Detener procesamiento de la cola" \
                        "Limpiar Cola" "Limpiar trabajos antiguos" \
                        "Volver" "Regresar al men√∫ principal" 2>/dev/null)
        
        case "$choice" in
            "Ver Estado")
                show_queue_status_gui
                ;;
            "Iniciar Cola")
                start_queue_processing
                ;;
            "Detener Cola")
                stop_queue_processing
                ;;
            "Limpiar Cola")
                clean_queue_gui
                ;;
            "Volver"|"")
                break
                ;;
        esac
    done
}

# Mostrar estado de la cola en GUI
show_queue_status_gui() {
    local status_output
    status_output=$("$HOME/.local/bin/download-queue-manager" status 2>/dev/null || echo "Error obteniendo estado")
    
    zenity --info --title="üìÅ Estado de la Cola" \
           --text="$status_output" \
           --width=500 --height=300
}

# Iniciar procesamiento de cola
start_queue_processing() {
    if zenity --question \
              --title="Iniciar Cola" \
              --text="¬øIniciar el procesamiento de la cola de descargas?\n\nEsto ejecutar√° las descargas pendientes en segundo plano." \
              --width=300; then
        
        # Ejecutar en segundo plano
        nohup "$HOME/.local/bin/download-queue-manager" start > /dev/null 2>&1 &
        
        notify_gui "üöÄ Cola Iniciada" "El procesamiento de la cola ha comenzado"
        zenity --info --title="√âxito" \
               --text="Cola de descarga iniciada exitosamente.\n\nLas descargas se ejecutar√°n en segundo plano."
    fi
}

# Detener procesamiento de cola
stop_queue_processing() {
    if zenity --question \
              --title="Detener Cola" \
              --text="¬øDetener el procesamiento de la cola?\n\nLas descargas en curso se completar√°n." \
              --width=300; then
        
        "$HOME/.local/bin/download-queue-manager" stop
        
        notify_gui "‚èπÔ∏è Cola Detenida" "El procesamiento de la cola se ha detenido"
        zenity --info --title="√âxito" \
               --text="Cola de descarga detenida."
    fi
}

# Limpiar cola GUI
clean_queue_gui() {
    local days
    days=$(zenity --entry \
                  --title="Limpiar Cola" \
                  --text="¬øCu√°ntos d√≠as de antig√ºedad para limpiar?" \
                  --entry-text="7" 2>/dev/null)
    
    if [[ -n "$days" ]] && [[ "$days" =~ ^[0-9]+$ ]]; then
        "$HOME/.local/bin/download-queue-manager" clean "$days"
        zenity --info --title="√âxito" \
               --text="Cola limpiada. Archivos m√°s antiguos de $days d√≠as han sido eliminados."
    fi
}

# Di√°logo de configuraci√≥n
show_settings_dialog() {
    local current_quality="${DEFAULT_QUALITY:-best[height<=1080]/best}"
    local current_dir="${DOWNLOAD_DIR:-$HOME/Descargas/Videos}"
    local current_concurrent="${MAX_CONCURRENT_DOWNLOADS:-3}"
    
    local settings
    settings=$(zenity --forms \
                      --title="‚öôÔ∏è Configuraci√≥n" \
                      --text="Configuraci√≥n del sistema:" \
                      --add-entry="Directorio de descarga:" \
                      --add-combo="Calidad por defecto:" \
                      --combo-values="best[height<=1080]/best|best[height<=720]/best|best[height<=480]/best|bestaudio/best" \
                      --add-entry="Descargas concurrentes:" \
                      --add-combo="Notificaciones:" \
                      --combo-values="true|false" \
                      --add-combo="Actualizaci√≥n autom√°tica:" \
                      --combo-values="true|false" \
                      --separator="|" \
                      --width=500 2>/dev/null)
    
    if [[ -n "$settings" ]]; then
        IFS='|' read -r new_dir new_quality new_concurrent new_notifications new_auto_update <<< "$settings"
        
        # Actualizar archivo de configuraci√≥n
        sed -i "s|DOWNLOAD_DIR=.*|DOWNLOAD_DIR=\"$new_dir\"|" "$CONFIG_DIR/config.conf"
        sed -i "s|DEFAULT_QUALITY=.*|DEFAULT_QUALITY=\"$new_quality\"|" "$CONFIG_DIR/config.conf"
        sed -i "s|MAX_CONCURRENT_DOWNLOADS=.*|MAX_CONCURRENT_DOWNLOADS=$new_concurrent|" "$CONFIG_DIR/config.conf"
        sed -i "s|NOTIFICATIONS_ENABLED=.*|NOTIFICATIONS_ENABLED=$new_notifications|" "$CONFIG_DIR/config.conf"
        sed -i "s|AUTO_UPDATE_YTDLP=.*|AUTO_UPDATE_YTDLP=$new_auto_update|" "$CONFIG_DIR/config.conf"
        
        zenity --info --title="√âxito" \
               --text="Configuraci√≥n guardada exitosamente."
    fi
}

# Mostrar estad√≠sticas
show_statistics() {
    local stats_text="üìä Estad√≠sticas de Descarga\n\n"
    
    # Contar archivos por plataforma
    local tiktok_count=$(find "$DOWNLOAD_DIR/TikTok" -name "*.mp4" 2>/dev/null | wc -l)
    local youtube_count=$(find "$DOWNLOAD_DIR/YouTube" -name "*.mp4" -o -name "*.webm" 2>/dev/null | wc -l)
    local instagram_count=$(find "$DOWNLOAD_DIR/Instagram" -name "*.mp4" 2>/dev/null | wc -l)
    local otros_count=$(find "$DOWNLOAD_DIR/Otros" -type f 2>/dev/null | wc -l)
    
    stats_text+="üéµ TikTok: $tiktok_count videos\n"
    stats_text+="üé¨ YouTube: $youtube_count videos\n"
    stats_text+="üì∑ Instagram: $instagram_count videos\n"
    stats_text+="üåê Otros: $otros_count archivos\n\n"
    
    # Espacio usado
    local total_size=$(du -sh "$DOWNLOAD_DIR" 2>/dev/null | cut -f1 || echo "N/A")
    stats_text+="üíæ Espacio usado: $total_size\n\n"
    
    # Estado de la cola
    local queue_stats=$("$HOME/.local/bin/download-queue-manager" status 2>/dev/null | grep -E "(Pendientes|Descargando|Completados|Fallidos)" || echo "Cola no disponible")
    stats_text+="üìÅ Estado de la Cola:\n$queue_stats"
    
    zenity --info --title="üìä Estad√≠sticas" \
           --text="$stats_text" \
           --width=400 --height=300
}

# Compartir en redes sociales
show_social_sharing() {
    local message
    message=$(zenity --entry \
                     --title="üì± Compartir en Redes Sociales" \
                     --text="Mensaje para compartir:" \
                     --entry-text="¬°Acabo de descargar un video con Video Downloader! #VideoDownloader #YTdlp" \
                     --width=500 2>/dev/null)
    
    if [[ -n "$message" ]]; then
        local platform
        platform=$(zenity --list \
                          --title="Seleccionar Plataforma" \
                          --text="¬øD√≥nde quieres compartir?" \
                          --column="Plataforma" \
                          "Twitter" \
                          "Telegram" \
                          "Discord" \
                          "Copiar al Portapapeles" 2>/dev/null)
        
        case "$platform" in
            "Twitter")
                local twitter_url="https://twitter.com/intent/tweet?text=$(echo "$message" | jq -rR @uri)"
                xdg-open "$twitter_url" 2>/dev/null
                ;;
            "Telegram")
                local telegram_url="https://t.me/share/url?url=&text=$(echo "$message" | jq -rR @uri)"
                xdg-open "$telegram_url" 2>/dev/null
                ;;
            "Discord")
                zenity --info --title="Discord" \
                       --text="Copia el mensaje manualmente a Discord:\n\n$message"
                ;;
            "Copiar al Portapapeles")
                echo "$message" | xclip -selection clipboard 2>/dev/null || echo "$message" | pbcopy 2>/dev/null
                zenity --info --title="√âxito" \
                       --text="Mensaje copiado al portapapeles."
                ;;
        esac
    fi
}

# Men√∫ de herramientas
show_tools_menu() {
    while true; do
        local choice
        choice=$(zenity --list \
                        --title="üîß Herramientas" \
                        --text="Herramientas adicionales:" \
                        --column="Herramienta" --column="Descripci√≥n" \
                        --width=500 --height=300 \
                        "Actualizar Sistema" "Actualizar yt-dlp y componentes" \
                        "Backup Configuraci√≥n" "Crear backup de la configuraci√≥n" \
                        "Restaurar Backup" "Restaurar configuraci√≥n desde backup" \
                        "Limpiar Cache" "Limpiar archivos temporales" \
                        "Ver Logs" "Ver registros del sistema" \
                        "Volver" "Regresar al men√∫ principal" 2>/dev/null)
        
        case "$choice" in
            "Actualizar Sistema")
                update_system_gui
                ;;
            "Backup Configuraci√≥n")
                backup_configuration_gui
                ;;
            "Restaurar Backup")
                restore_backup_gui
                ;;
            "Limpiar Cache")
                clean_cache_gui
                ;;
            "Ver Logs")
                view_logs_gui
                ;;
            "Volver"|"")
                break
                ;;
        esac
    done
}

# Actualizar sistema GUI
update_system_gui() {
    (
        echo "# Actualizando yt-dlp..."
        echo "25"
        
        yt-dlp --update 2>/dev/null
        
        echo "# Verificando actualizaciones del sistema..."
        echo "50"
        
        # Ejecutar script de actualizaci√≥n
        "$HOME/.local/bin/video-downloader-update" >/dev/null 2>&1
        
        echo "# Limpiando archivos temporales..."
        echo "75"
        
        rm -rf "$TEMP_DIR"/* 2>/dev/null
        
        echo "# ¬°Actualizaci√≥n completada!"
        echo "100"
        
        sleep 2
    ) | zenity --progress \
               --title="Actualizando Sistema" \
               --text="Procesando..." \
               --width=400 \
               --auto-close
    
    zenity --info --title="√âxito" \
           --text="Sistema actualizado exitosamente."
}

# Backup de configuraci√≥n GUI
backup_configuration_gui() {
    local backup_file="$CONFIG_DIR/backups/config_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    (
        echo "# Creando backup de configuraci√≥n..."
        echo "50"
        
        mkdir -p "$CONFIG_DIR/backups"
        tar -czf "$backup_file" -C "$CONFIG_DIR" config.conf 2>/dev/null
        
        echo "# Backup completado"
        echo "100"
        
        sleep 1
    ) | zenity --progress \
               --title="Creando Backup" \
               --text="Procesando..." \
               --width=300 \
               --auto-close
    
    zenity --info --title="√âxito" \
           --text="Backup creado exitosamente:\n\n$backup_file"
}

# Restaurar backup GUI
restore_backup_gui() {
    local backup_file
    backup_file=$(zenity --file-selection \
                         --title="Seleccionar Backup" \
                         --filename="$CONFIG_DIR/backups/" \
                         --file-filter="Backups (*.tar.gz) | *.tar.gz" 2>/dev/null)
    
    if [[ -n "$backup_file" ]] && [[ -f "$backup_file" ]]; then
        if zenity --question \
                  --title="Confirmar Restauraci√≥n" \
                  --text="¬øRestaurar la configuraci√≥n desde el backup seleccionado?\n\nEsto sobrescribir√° la configuraci√≥n actual." \
                  --width=400; then
            
            tar -xzf "$backup_file" -C "$CONFIG_DIR" 2>/dev/null
            
            zenity --info --title="√âxito" \
                   --text="Configuraci√≥n restaurada exitosamente."
        fi
    fi
}

# Limpiar cache GUI
clean_cache_gui() {
    if zenity --question \
              --title="Limpiar Cache" \
              --text="¬øLimpiar todos los archivos temporales y cache?" \
              --width=300; then
        
        rm -rf "$TEMP_DIR"/* 2>/dev/null
        rm -rf "$HOME/.cache/video-downloader"/* 2>/dev/null
        
        zenity --info --title="√âxito" \
               --text="Cache limpiado exitosamente."
    fi
}

# Ver logs GUI
view_logs_gui() {
    local log_content
    if [[ -f "$CONFIG_DIR/logs/queue.log" ]]; then
        log_content=$(tail -n 100 "$CONFIG_DIR/logs/queue.log" 2>/dev/null || echo "No hay logs disponibles")
    else
        log_content="No hay logs disponibles"
    fi
    
    zenity --text-info \
           --title="üìú Logs del Sistema" \
           --filename=<(echo "$log_content") \
           --width=700 --height=500 2>/dev/null
}

# Di√°logo "Acerca de"
show_about_dialog() {
    local about_text="üé¨ Descargador Universal de Videos v3.0\n\n"
    about_text+="üì¶ Desarrollado por: DreamCoder08\n"
    about_text+="üìÖ Fecha: 2025-06-14\n"
    about_text+="üñ•Ô∏è Sistema: Arch Linux\n\n"
    about_text+="üé• Caracter√≠sticas:\n"
    about_text+="‚Ä¢ Descarga de m√∫ltiples plataformas\n"
    about_text+="‚Ä¢ Interfaz gr√°fica con Zenity\n"
    about_text+="‚Ä¢ Sistema de colas de descarga\n"
    about_text+="‚Ä¢ Notificaciones de escritorio\n"
    about_text+="‚Ä¢ Backup autom√°tico de configuraci√≥n\n"
    about_text+="‚Ä¢ Integraci√≥n con redes sociales\n\n"
    about_text+="üîí 100% Seguro - Sin virus ni malware\n"
    about_text+="üåê Basado en yt-dlp (c√≥digo abierto)\n\n"
    about_text+="‚ö†Ô∏è Usa responsablemente respetando los t√©rminos de servicio"
    
    zenity --info --title="Acerca de" \
           --text="$about_text" \
           --width=500 --height=400
}

# Funci√≥n principal
main() {
    # Verificar dependencias
    check_dependencies
    
    # Configurar iconos
    setup_icons
    
    # Crear directorios necesarios
    mkdir -p "$DOWNLOAD_DIR" "$TEMP_DIR" "$CONFIG_DIR/logs" "$CONFIG_DIR/backups"
    
    # Mostrar ventana principal
    show_main_window
}

# Ejecutar solo si se llama directamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

